-*- mode: org; comment-column: 0; -*-

# This file contains a list of git commands that I've found handy in situations
# I've faced over time. These are commands that _I_ have used (successfully).
# I'm not claiming that this is the only way or even the right
# way to handle a particular situation that you may face. YMMV.

# Along with commands, there are also some general git patterns that I have noted
# down. I hope this file is of help to you, or at least teaches you something
# about git that you didn't know beforehand

# The commands are ordered by type rather than difficulty, so you are going to
# find intermediate and slightly advanced commands intermingled with the easy
# ones. I mean for this document to be used as a cheat-sheet, not a tutorial,
# but if you are confused about something shoot me a mail

* Basics: Adding a remote to git repo

$ git init

$ git add .

$ git commit -m

$ git remote add origin git@github.com:vedang/reponame.git

* Branching

# The default commit is HEAD.
$ git checkout -b <branchname> <commit>

# delete branch
$ git checkout -d <branchname>

# Rename a branch
$ git checkout -m <branchname> <newbranchname>

# Merge branch <branchname> with current branch
$ git merge <branchname>

# Push a local branch to remote
$ git push <remotename> <localbranchname>:<remotebranchname>

# Delete branch on remote. Literally, push /nothing/ into <branchname>
$ git push <remotename> :<branchname>

# Create an empty branch
# (Check out the simpler version right below this example)
$ git symbolic-ref HEAD refs/heads/newbranch
$ rm .git/index
$ git clean -fdx

# Simpler method with git v1.7.2+
$ git checkout --orphan newbranch
$ git rm -rf .

# Create an empty commit
# This trick is useful when initializing the git repository, since the
# initial commit has special properties which stop it from being used
# in rebase operations.
$ git commit -m "Empty initial commit" --allow-empty

# Create a separate repository from a range of commits restricted to a
# sub-directory

# Create a new repository from a sub-directory named trunk
# Git will also automatically remove commits that
# did not affect the subdirectory
$ git filter-branch --subdirectory-filter trunk HEAD
$ git remote add trunk /path/to/trunk
$ git push trunk master
# This can also be done using git-subtree on git 1.7.11+
# Refer to [[id:171BE2FB-7835-4E96-A984-FC2B24E91019][Subtree (1.7.11+)]]

# Getting back original master
$ git checkout masters_original_HEAD
$ git checkout -b tmp
$ git merge -s ours master
$ git checkout master
$ git merge tmp
$ git reset --soft HEAD^

# The final step removes the merge-commit and reverts the local repo
# back to state before filter-branch

# Change the upstream target for a branch
# (change the branch being tracked)
$ git checkout <branch_name>
$ git branch --set-upstream-to=origin/<branch_name>

* Merging and Rebasing

# Merge the code from some other branch into our branch, keeping our code
# on every conflict
$ git merge -s ours <branchname>

# Similarly, we can also use theirs with -s to keep the incoming copy of code

# This strategy (above) is especially useful if the code on master has
# become a total mess and you just want to replace it with the code on a sane
# branch (say develop)
$ git checkout develop
$ git merge -s ours master
$ git checkout master
$ git merge develop

# You can also use this strategy to resolve merge-conflicts on a per-file basis
[~/testing (develop *+|MERGING u+7)]
$ git status
# On branch develop
# Your branch is ahead of 'origin/develop' by 7 commits.
#
# Changes to be committed:
#
#       modified:   INSTALL.txt
#       modified:   License.txt
#
# Unmerged paths:
#   (use "git add/rm <file>..." as appropriate to mark resolution)
#
#       both modified:      README.txt
#

# to keep the changes on our branch
$ git checkout --ours README.txt
$ git add README.txt
$ git commit

# merge project A into subdirectory A
# - From http://jasonkarns.com/blog/merge-two-git-repositories-into-one/
# Path should be a remote
# the -f option runs `git fetch <name>` immediately after the remote info
# is set up.
# This makes your history look like this directory was in the repo all along
# There is a good explanation of this on github here -
# https://help.github.com/articles/working-with-subtree-merge
$ git remote add -f projA /path/to/projA
$ git merge -s ours --no-commit projA/master
$ git read-tree --prefix=subdirA/ -u projA/master
$ git commit -m "merging projA into subdirA"

# This can also be done much easily using the new git subtree command. git-subtree
# in now included in git 1.7.11+ in the contrib section
# Refer to [[id:171BE2FB-7835-4E96-A984-FC2B24E91019][Subtree (1.7.11+)]]

# Sometimes, it's irritating that rebase destroys merge commits.
# I want the merge commit there to indicate the flow of the work
# Enter --preserve-merges or -p
$ git rebase -p <branchname>

# Find the common base between two branches. (useful to know what will
# merge / has diverged)
$ git merge-base <branch1> <branch2>

# Reverting a merge commit is almost (but not quite) like reverting a
# normal commit. In the normal case, if you want to revert commit M,
# you just say =git revert M=, but if M is a merge-commit, you have to
# specify _which side (parent) of the merge_ you want to revert.
# Eg: Do you want to revert the changes (A B), or (C D)?
   # ---C---D---M---x---x
   #           /
   #   ---A---B

# The git log will show you this information for a merge commit:

   # commit 87e6940c98b9b297320ad31919210a901ced9ff0
   # Merge: 80f9a47 b866156
   # Author: Vedang Manerikar <ved.manerikar@gmail.com>
   # Date:   Thu Aug 7 13:56:08 2014 +0530
   #
   #     Merge branch 'feature/X' into master

# Here D = 80f9a47 and B = b866156
# So if you want to revert (A B), you have to tell git to revert the
# 2nd parent, and keep the 1st.

$ git revert M -m 2

# The tree will now look like :
   # ---C---D---M---x---x---W
   #           /
   #   ---A---B
# where W reverts the changes introduced in M.

# NOTE: This causes problems if you ever want to merge (A B) back into
# this branch! You have to remember to "revert the revert commit".
# For more information on why git behaves this way, read:
# https://www.kernel.org/pub/software/scm/git/docs/howto/revert-a-faulty-merge.txt
* Tagging

# Create a tag signed using gpg
$ git tag -u <key-id> <tagname> <commitid>

# Push single tag to remote
$ git push <remotename> <tagname>

# Push all tags on branch <branchname> to remote
$ git push <remotename> <branchname> --tags

# If you have saved your signing key in git config:
$ git tag -s <tagname> <commitid>

# Fetch tags from origin
$ git fetch --tags origin
# Note: a plain git-fetch fetches all branches, all commits associated with
# those branches, and all tags _reachable_ from those branches.
# This means that if a certain tag is no longer reachable from any branch, it
# will not be fetched. Hence the explicit git fetch --tags command.

# list tags
$ git tag -l

# list tags and sort numbered versions correctly.
$ git tag --list --sort=version:refname

# Create a tag without signing it (annotated tag)
$ git tag -a

# Find out the latest version tag you have created (say v0.93.1.2)
$ git describe --match v*

# Find the latest tag that you have created.
$ git describe --tags `git rev-list --tags --max-count=1`

# Show an old version of the file
$ git show v2.5:fs/locks.c

# Get the commit-id from a tag name
$ git rev-parse name

# Deleting a tag locally
$ git tag -d 12345

# and deleting a tag from origin
$ git push origin :refs/tags/12345

# Print list of tags that contain a given commit
$ git tag --contains <SHA>

* Listing and Display

# list all the files that have changed between two revisions
$ git diff --name-only rev1 rev2

# list files in a single commit. format string is very, very useful
$ git show --pretty="format:" --name-only <commitid>

# single line logs
$ git log --pretty=oneline

# commits by author
$ git log --author=foo

# some other fun things with log: --graph, --topo-order, --since
# here is a particularly good example of playing with log for fun and profit
$ git log --pretty=format:'%C(bold red)%h%Creset -%C(bold yellow)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)[%an]%Creset' --graph

# Work done in the last 7 Days
$ git log --author=$USER --format="- %B" --since=-7days --reverse

# show files changed between branches in a 'git status' way
$ git diff --name-status master..branch

# show changes in a single file (log + diff)
$ git log -p <filename>

# Generate changelog for a branch
$ git shortlog master..branch

# list all commits that differ between branches.
# Note: --cherry-pick can be replaced by --cherry-mark. --cherry-mark
# marks equivalent commits with = rather than omitting them, and in-equivalent
# ones with +.
$ git log --left-right --graph --cherry-pick --oneline branch1...branch2

# List all unpushed local commits
$ git log --branches --not --remotes

# Here is an interesting log format
$ git log --pretty=format:'%C(bold red)%h%Creset -%C(bold yellow)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)[%an]%Creset' --graph
# List the most recent unpushed local commits on each branch
$ git log --branches --not --remotes --simplify-by-decoration --decorate --oneline

# List unpushed local commits in the current branch
$ git log @{u}..

# List all local changes (origin/master is the remote branch in this example)
$ git diff origin/master..HEAD

# Show changes made to a file from rev1 to rev2
# rev1 occurs before in time than rev2
$ git diff rev1:filename rev2:filename

* Patches

# Create a patch between two ids
$ git diff [commit-id-before] [commit-id-after] > my.patch

# Create a ready-to-send patch with the last 3 commits
$ git format-patch -3

# Apply commits selectively from one branch to another.
$ git format-patch -k -s --stdout R1..R2 | git am -3 -k

# -k keep subject -s signoff -3 use diff3 in case of conflict
# there is also an easier way of doing this
$ git cherry-pick R1..R2

# Create a patch of the commits present in this branch but not in master
git format-patch master --stdout > diff-with-master.patch

# Check the stats of the patch
$ git apply --stat diff-with-master.patch

# Check if the patch will apply cleanly
$ git apply --check diff-with-master.patch

# Apply the patch to the master branch
$ git am -3 --signoff < diff-with-master.patch

* Submodules

# Adding another repository as a submodule
$ git submodule add path_to_git_repo local_dir
$ git submodule init
$ git submodule update

# Git submodule update keeps the submodule in headless state.
# When you want to bring the submodule up-to-date, remember to
# checkout to a branch first.
# NOTE: This is not true with the latest versions of git. These versions
# will checkout the default branch in the submodule for you

# Get all the submodules in a repository while cloning it
$ git clone --recursive <path-to-remote-repo>

# Deleting a Submodule
# 1. Delete the relevant section from the .gitmodules file.
# 2. Delete the relevant section from .git/config.
# 3.
$ git rm --cached path_to_submodule # (no trailing slash)
# 4. Commit and delete the now untracked submodule files.

# Updating all submodules while pulling upstream changes
# 1. Get all the changes
$ git pull --recurse-submodules #requires git 1.7.3+
# 2. Checkout the proper SHA-1
$ git submodule update --recursive

* Subtree (1.7.11+)
  :PROPERTIES:
  :ID:       171BE2FB-7835-4E96-A984-FC2B24E91019
  :END:
# Splitting out code from an existing repository into a new repository
$ git subtree split --prefix=subdir/ --annotate='(split)' -b split_branch
$ git push git@github.com:yourname/your-repo.git split_branch:master

# Adding a repository as a subtree to your current repository
$ git subtree add --prefix=path/in/curr/repo --squash \
		git://github.com/yourname/your-repo.git master

# Pulling changes from subtree
$ git subtree pull --prefix=path/in/curr/repo --squash \
		git://github.com/yourname/your-repo.git master

# Pushing the changes that you have made in a subtree back upstream
$ git subtree split --prefix=subdir/ --annotate='(split)' -b split_dir_latest
# subtree guarantees that previously seen commits with retain the same SHAs
# which makes this operation very straightforward
$ git push git@github.com:yourname/your-repo.git split_dir_latest:master

* Worktree (2.5+)
# Use Git Worktrees (2.5+) for working on multiple things in parallel
# I want to run tests on the work I've done on `feature/s`

[v@hm ~/src/m (feature/s $ u+1)]
$ git worktree add -b s-tests ../mtesting feature/s
Enter ../mtesting (identifier mtesting)
Branch s-tests set up to track local branch feature/s by rebasing.
Switched to a new branch 's-tests'

[v@hm ~/src/m (feature/s $ u+1)]
$ cd ../mtesting

# Voila! I have a new directory with a new branch that is linked to my
# original repository!
[v@hm ~/src/mtesting (s-tests $ u=)]
$ make testclj

# Now I can start my tests here and go back to my work in the original
# repository without worrying about breaking anything!
[v@hm ~/src/mtesting (s-tests $ u=)]
$ cd ../m
[v@hm ~/src/m (feature/s $ u+1)]
$

# List existing worktrees
$ git worktree list

* Adding, Removing & Committing

# interactively stage changes to file
$ git add -p

# selectively apply a commit from one branch to another
$ git cherry-pick <commit-id>

# if you forgot to add a file to your latest commit,
# you can use this command to amend the commit
$ git commit --amend

# this will reuse the commit message used in the latest commit,
# so that you don't have to retype the commit message
$ git commit --amend -C HEAD

# Delete all untracked files in the repository
# -d : delete untracked directories
# -x : delete ignored files.
# -f : force. This command is disabled otherwise.
$ git clean -dxf <path>

* Debugging, Recovery & Undoing

# To find a regression that happened between v2.6.18 and master
$ git bisect start
$ git bisect good v2.6.18
$ git bisect bad master

# Git will now take you to a commit in between v2.6.18 and master,
# verify if the commit is good or bad and mark it using
$ git bisect good # or
$ git bisect bad

# When you've found the bad commit and are done with the bisect
$ git bisect reset

# You can also specify a script to auto mark a commit as good or bad
$ git bisect run my_script

# Show me a list of dangling commits and blobs
$ git fsck --lost-found --no-reflog

# Show me everywhere that HEAD has pointed to in the past
git reflog

# Show me all commits that touched a file / multiple files /
# files in a given directory / files in multiple directories
# since version v1.5.0
$ gitk v1.5.0.. <filenames/directorynames>

# show me all changes to file in the in the last 2 weeks
$ gitk --since="2 weeks ago" -- <filename>

# Show me the last 100 changes to the file across all branches
$ gitk --max-count=100 --all -- <filename>

# gitk can take a selective list of commits and
# show them to you, this allows us to see all the dangling
# commits and select the ones we want to recover.
$ gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )

# Undo a commit amend:

# 1. When you haven't pushed the commit to remote
# From: http://stackoverflow.com/a/1459264/137430
# Move the current head so that it's pointing at the old commit
# Leave the index intact for redoing the commit
$ git reset --soft HEAD@{1}

# commit the current tree using the commit details of the previous
# HEAD commit. (Note that HEAD@{1} is pointing somewhere different from the
# previous command. It's now pointing at the erroneously amended commit.)
$ git commit -C HEAD@{1}

# 2. When you have pushed the original commit to remote
$ git reset --soft HEAD^1

$ git stash

$ git pull origin <branchname>

$ git stash pop
# Resolve whatever conflicts you may have and create a new commit with the
# changes you wanted to amend.

# Undo a rebase
# Sometimes, we rebase by mistake. Here is an easy way to fix it,
# using git's awesome reflog
$ git log -g  # Walks reflog and shows you a history of your actions
              # This command is invaluable and needs to be cross
              # documented in the logging section.
# Walk the history of your actions until the moment before you began
# the rebase, then reset your branch here. Voila.

# Check the history of a branch. It will output all changes made to
# the branch, including its creation.
$ git reflog show --no-abbrev <branch name>

# Undo a git-rerere conflict resolution
# rerere is awesome, we are all agreed upon this.
# However, sometimes, we can make a _bad_ conflict resolution
# And then we are royally screwed.
# When we figure out that a bad resolution has been applied,
# we can undo the rebase and do it again. Unfortunately for us, rerere
# will have stored the resolution, and it will happily go ahead and
# apply the resolution. Now what?
# Recover conflict markers in a file by running the following command:

$ git checkout -m <file>

* Misc

# get rid of bloody trailing whitespace
$ git apply --whitespace=fix

# Rewrite Author's email address
# WARNING: This rewrites every commit in repository i.e. All SHAs will
#          change. Use this on a New repository
$ git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "original_email_address" ];
        then
                GIT_AUTHOR_NAME="FirstName LastName";
                GIT_AUTHOR_EMAIL="new_email_address";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD
# Re-write author's email in the last _unpushed_ commit
# 1. Set the new author name and email using git config and then use :
$ git commit --amend --reset-author

# Quick Git Server for local network
# You can run the git daemon if you want other people to clone your
# repository over the local network.
$ git daemon --reuseaddr --verbose --base-path=. --export-all ./.git

# You can define a handy alias for this. I use =git serve=
$ git config --global alias.serve '!git daemon --reuseaddr --verbose --base-path=. --export-all ./.git'
# Refer http://stackoverflow.com/a/377293

# To clone from this daemon, give your computer ip to your colleagues.
# Find your computer ip
# $ ifconfig | grep "inet " | awk '{ print $2 }'

# On other computer:
$ git clone git://192.168.254.135/ project

* Extra configuration for a better Git experience

$ git config --global user.name "FirstName LastName"

$ git config --global user.email "user@example.com"

# Fancy colors on the terminal
$ git config --global color.ui "auto"

# Reuse Rebase Resolution, always
$ git config --global rerere.enabled 1

# Always pull with the rebase switch
$ git config --global branch.autosetuprebase always

# Setting up rebase for existing branches
$ git config branch.*branch-name*.rebase true

# Always setup a branch for merging
$ git config --global branch.autosetupmerge always

# Use shortlog summary when creating a merge commit
$ git config --global merge.summary true

# Save your gpg signing key so that you don't have to type it every time
$ git config --global user.signingkey <keyid>

# List your current git configuration
$ git config --list

# Find extra configuration for my personal use-case in my dotfiles directory
# https://github.com/vedang/dotfiles/blob/master/.gitconfig


* Quick Git Server for local network

# http://stackoverflow.com/a/377293
$ git config --global alias.serve '!git daemon --reuseaddr --verbose --base-path=. --export-all ./.git'

# Find your computer ip
$ ifconfig | grep "inet " | awk '{ print $2 }'

# On other computer:
$ git clone git://192.168.254.135/ project
