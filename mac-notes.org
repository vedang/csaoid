:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       1518f569-dbda-4abd-a1bb-39856423d5f5
:END:
#+title: Tips and Tricks on MacOS
* Change the Lock Screen Keyboard Shortcut
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       74e093a7-5b6d-4c16-af36-b37933d760fe
:END:
- Launch System Preferences and go to the Keyboard pane.
- Select the 'Keyboard Shortcuts' tab.
- From the list on the left, select 'Application Shortcuts'.
- Click on the plus (+) button below to add your new shortcut.
- In the dialog box we'll want to leave 'All Applications' selected in the first menu. Enter 'Lock Screen' as the Menu Title. Please note this has to be exactly the same name you entered when saving the service in Automator. Finally, enter your keyboard shortcut. Let's go with Option+Shift+Q
- Click Add and you're all done!
* Turn the wifi on/off from the terminal
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       f06189ab-092c-42c0-a96c-b2a217633bd2
:END:
  - You have to use =networksetup= for this
    #+begin_src shell-script
      # List all the hardware ports controlled by networksetup
      networksetup -listallhardwareports
      # Turn the wifi on
      networksetup -setairportpower en0 on # or off
    #+end_src
* Check if your machine is overheating
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       d0b7c3e0-b545-4150-a731-bebe0e549dc7
:END:
  #+begin_src sh :eval no
    pmset -g thermlog
  #+end_src
* Using secrets in shell scripts and config files
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:11]
:ID:       3fa0dfe5-53ba-47c7-a19d-ef3bdfbb9940
:BRAIN_PARENTS: FCE04B5D-71FB-4A3B-9ABC-FB9B6A531BE2
:END:
:RESOURCES:
- [[https://www.netmeister.org/blog/keychain-passwords.html][Using the OS X Keychain to store and retrieve passwords]]
:END:
If you have a local script or ~.bashrc~ or some other config script, avoid exporting/setting secret variables directly in these scripts. Instead:

1. Open *Keychain Access.app*
2. Add a new keychain from *File > New keychain*
   - Using new keychain will allow you to use a different password than login for storing secrets.
   - You can also use the login keychain, if you don't want to enter password each time
3. Add a name for the keychain, once you will click on Save button, it will ask to enter the password for the new keychain.
   - Add a decently complex password.
4. Once added, select the newly created keychain from the left pane of the Keychain Access app.
5. To add a new password item, select *File > New Password Item*. Fill in the following details:
   - Keychain item name: This is the keyword to access your keychain item.
   - Account Name: This could be anything, usually used to group 1 or more password items
   - Password: This is the secret you want to store in the Keychain against this item.
6. Once added, you should test the secret access in terminal with following command:
   #+begin_src sh :eval no
     security find-generic-password -a TEST_account_name -s TEST_item_name -w
   #+end_src

To load secrets, you can now create a function in your script as follows:
#+begin_src sh :eval no
  function load_secrets () {
    export SECRET1=$(security find-generic-password -a TEST_account1 -s TEST_item1 -w)
    export SECRET2=$(security find-generic-password -a TEST_account1 -s TEST_item2 -w)
  }
#+end_src

* My personal Operating System setup from scratch for macOS Monterey
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       eec0482f-6b83-45f7-b584-d42fd13d3bef
:END:
** Mac: Install my favorite Nerd Fonts
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       a623ed27-7628-44ae-8568-2088b1b3e79b
:END:
- Download Fantasque NF from https://www.nerdfonts.com/font-downloads
- This is the first step because ~starship~ requires a Nerd Font to work correctly (installed later)

** Mac: Install the basics for getting started with anything else
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       7c821c94-9d93-4bc5-a157-82047ff841f4
:END:
- Install ~brew~ from https://brew.sh
- Install common packages from ~brew~, as mentioned in the section copied from my Ubuntu guide (pasted below)
- After completing common package installation, install casks and packages specific to MacOS
  #+begin_src sh :eval no
    brew install ledger podman skopeo pinentry-mac starship gnu-sed gnupg coreutils dog pandoc fzf ffmpeg qpdf zig fossil
  #+end_src
  #+begin_src sh :eval no
    brew install --cask discord brave-browser keepassxc ripcord tresorit whatsapp mactex iterm2 signal zulip obsidian transmission vlc loom notion macfuse
  #+end_src

*** Ubuntu: Install the basics for getting started with anything else
- Common packages (Replace ~sudo apt~ with ~brew~ for Mac OS)
  #+begin_src sh :eval no
    sudo apt install tmux mercurial subversion aspell automake texinfo shellcheck tree wget curl trurl git jq hugo direnv
  #+end_src
- Linux specific packages
  #+begin_src sh :eval no
    sudo apt install gnome-tweaks aspell-en gawk default-jre-headless default-jre
  #+end_src

** Mac: Set up file sharing to access private files
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       d1581c2b-4d38-4820-b931-96ae0944c1dd
:END:
Follow the instructions below to set up my private dotfiles.

*** Ubuntu: Set up file sharing to access private files
- Setup my file-sharing systems to get access to my common files
- Symlink my ssh keys and gpg keys from my file-sharing systems to the home dir
- Make sure that [[id:39F38876-3B5D-4547-B608-A0384EFE540B][permissions are correctly set on the keys]]

** Mac: Clone my public dotfiles into my source folder
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       0e5ed504-8d54-4de7-a1eb-f31e4f4915c3
:END:
- Symlink ~.gitconfig~ and ~.gitattributes~ from my public ~dotfiles~ to the home dir.

** Mac: Install starship prompt
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       8bca4e63-1d26-40e5-9e83-3c4d5dc26e7d
:END:
We have already installed it using ~brew~ in one of the steps above. Follow the instructions below to install configuration files for ~starship~.

*** Ubuntu: Install starship prompt
- Install the ~starship~ prompt from https://starship.rs/
- Symlink ~starship.toml~ to ~/.config/~

** Mac: Install zsh and  oh-my-zsh
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       e2512189-4002-4b62-8de6-e45b871accf8
:END:
Follow the instructions below to install and configure ~zsh~

*** Ubuntu: Install zsh and oh-my-zsh
- Refer to instructions here:
  - https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH
  - https://github.com/ohmyzsh/ohmyzsh/wiki
- Symlink ~.zhsrc~, ~.zshenv~ to home dir.
- Symlink ~personal.zsh~ in ~/.oh-my-zsh/custom/~ dir.

** Mac: Install fish shell
After installing ~fish~, install ~fisher~. Then install the following plugins:
- ~fisher install jorgebucaran/fisher~
- ~fisher install jorgebucaran/nvm.fish~
- ~fisher install ilancosman/tide@v5~
** Mac: Install Rust and Rust based CLI tools
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       6781bcab-99e0-420c-a74f-0b13d161021b
:END:
The CLI tools mentioned here are great productivity boosters. Check them out by searching for them if you are not sure what they do.

Follow the instructions below to install Rust and Rust based CLI tools.

*** Ubuntu: Install Rust and Rust based CLI tools
- Install Rust using Rustup as described at https://www.rust-lang.org/learn/get-started
- Install all the tools I use
  #+begin_src sh :eval no
    cargo install bat broot choose du-dust exa fd-find git-delta hyperfine procs ripgrep sd sqlx-cli tealdeer tokei vivid zoxide
  #+end_src

** Mac: Install Go and Go based CLI Tools
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       c0de3a60-6c61-45ab-a535-23dca168b894
:END:
- Install ~golang~ from ~brew~
  #+begin_src sh :eval no
    brew install golang
  #+end_src
- Install ~gopls~ (LSP) by following instructions in Go Wiki: https://pkg.go.dev/golang.org/x/tools/gopls#section-readme
- Install Go CLI tools from ~brew~
  #+begin_src sh :eval no
    brew install gron
  #+end_src

** Mac: Install tmux-tpm from source
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       c67cb4bd-e63d-45cd-9e27-d786cb642118
:END:
Follow the instructions below to install ~tpm~ : The ~tmux~ plugin manager

*** Ubuntu: Install tmux-tpm from source
- Symlink ~.tmux.conf~ to home dir
- Clone the ~tmux-tpm~ repo
  #+begin_src sh :eval no
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  #+end_src
- Execute ~C-b I~ inside tmux once to install all the plugins

** Mac: Install everything needed for Clojure development
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       c25c8d41-6e2e-4412-8826-df0d97ee6cb8
:END:
#+begin_src sh :eval no
  brew install leiningen clojure borkdude/brew/clj-kondo borkdude/brew/babashka cljstyle borkdude/brew/jet lilactown/brew/eql
#+end_src

*** Symlink my lein folder from private-dotfiles to ~.lein~ in home
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       ec38483d-2c98-40b0-94e1-65fc4f620934
:END:

*** Install jdk sources
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       b2ddefdf-390a-4e5a-aa92-c82eaa5013c3
:END:
#+begin_src sh :eval no
  brew install java visualvm mvn
#+end_src
~java~ needs to be symlinked when installed from ~brew~:
#+begin_src sh :eval no
  sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
#+end_src
Confirm installation by running ~java -version~

** Mac: Setup email via notmuch
- Install notmuch deps manually
  #+begin_src sh :eval no
    brew install xapian gmime talloc zlib notmuch msmtp isync
  #+end_src
- Symlink ~notmuch/.notmuch-config~, ~.mbsyncrc~ and ~.msmtprc~ from private dotfiles to Home.
- Symlink ~notmuch~ dir in private-dotfiles to ~<maildir>/.notmuch/hooks~

** Mac: Install Emacs from EmacsForMacOSX
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       8e38eec9-c1df-4a8c-85f6-978cee261331
:END:
- Download and install the latest =nightly= from https://emacsformacosx.com/builds
- Clone https://github.com/vedang/emacs-up to ~.emacs.d~
- Clone https://github.com/cask/cask to ~.cask~ in order to run cask based tests
- Symlink my  ~personal.el~ file and ~common.el~ file from private dotfiles into ~.emacs.d~
** Mac: Install tree-sitter and add support to Emacs
:PROPERTIES:
:CREATED:  [2023-05-28 Sun 16:42]
:ID:       F60A7521-F82E-4C02-A680-2D3E330B7076
:END:
I am following the instructions mentioned here: https://www.masteringemacs.org/article/how-to-get-started-tree-sitter

1. Installing Emacs: The step above this already installs emacs with ~tree-sitter~ support enabled on the latest master.
2. Installing Tree-Sitter: I installed ~tree-sitter~ from source, as explained in the link above. (I mean, it's the standard way to install anything, very straightforward)

These notes are now captured in detail in the README of my ~.emacs.d~ folder: [[id:4963A703-468F-4BA9-B680-590BCFBD36C0][Using Tree Sitter with emacs-up]]
** Mac: Install pip and python packages
#+begin_src sh :eval no
  pip3 install Pygments concentration
#+end_src
- ~Pygments~ provides source code highlighting in ~org-exports~
- ~concentration~ is useful for blocking distractions when working.

** Mac: Install pympress for PDF based presentations
#+begin_src sh :eval no
  # Doesn't need other packages because they have been previously installed
  brew install pympress
#+end_src

** Mac: Install yt-dlp for downloading videos from Youtube
#+begin_src sh :eval no
  brew install yt-dlp
#+end_src

** Mac: Install nvm, node, npm, and npx
- Note that NVM version might have upgraded, so check the website! There is no better way at the moment.
#+begin_src sh :eval no
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
  nvm install node
  nvm install-latest-npm
#+end_src

** CANCELLED Mac: Install Jenv                                   :noexport:cancelled:
CLOSED: [2022-03-29 Tue 10:32]
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       e261ba2b-1df6-4851-a633-b4fdb133b9f2
:END:
:LOGBOOK:
- State "CANCELLED"  from              [2022-03-29 Tue 10:32] \\
  I don't use jenv anymore. Please go through [[file:jvm-notes.txt]] for details on how to maintain / switch between different versions of Java
:END:
  - Install jenv from : https://github.com/jenv/jenv
  - Follow the instructions above to install it. The instructions
    contain Mac specific information on how to install multiple
    versions of java.
  - List all installed versions with =jenv versions=

** Mac: Install AWS CLI for accessing ECR
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       ecae10ce-f843-4315-9b56-e32961acd5f7
:END:
- ~brew install awscli~
- ~awscli configure~
- ~aws ecr get-login-password --region us-east-1 | podman login --username AWS --password-stdin <ecr-bucket>~

** Mac: Install tarsnap for setting up backup
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:10]
:ID:       e31877fe-10da-4ca7-9b57-188515d8bfc3
:END:
- ~brew install openssl~
- Follow instructions on the tarsnap site for compilation

** Mac: Install Alfred
- Go through Mayank's post on Productivity for learning how to use Alfred: https://www.firesofmay.com/productivity-tips-tricks-tools/
  + This post contains good instructions on Installing Alfred as well.
  + Replace Spotlight with Alfred, as mentioned in the post
  + IMHO, Alfred is worth paying for.
- Install my personal Alfred workflows from my private dotfiles.
** Mac: Install pgFormatter
- pgFormatter is a perl script and needs to be installed manually.
- Download the ~pg_format~ script from https://raw.githubusercontent.com/darold/pgFormatter/master/pg_format
  #+begin_src sh :eval no
    curl -O https://raw.githubusercontent.com/darold/pgFormatter/master/pg_format
  #+end_src
- Make sure it is executable and copy it to somewhere on your PATH
** Mac: Install toxiproxy
Project Page: https://github.com/Shopify/toxiproxy

#+begin_src sh :eval no
  brew tap shopify/shopify
  brew install toxiproxy
#+end_src
** Mac: Install awscli and rclone
These are important tools for cloud storage management. Both need setup management.

#+begin_src sh :eval no
  brew install awscli
#+end_src
For AWS CLI config, run ~aws configure sso~ to create a profile that you can use for all other AWS commands.

For rclone setup, refer to https://rclone.org/install/ and install the pre-compiled binary using curl
#+begin_src sh :eval no
  cd && \
      curl -O https://downloads.rclone.org/rclone-current-osx-amd64.zip && \
      unzip -a rclone-current-osx-amd64.zip && \
      cd rclone-*-osx-amd64
#+end_src

#+begin_src sh :eval no
  sudo mkdir -p /usr/local/bin && \
      sudo mv rclone /usr/local/bin/
#+end_src
#+begin_src sh :eval no
  cd .. && rm -rf rclone-*-osx-amd64 rclone-current-osx-amd64.zip
#+end_src
Run ~rclone config~ for setting up the necessary configuration

* Mac: Install Iosevka font
#+begin_src sh :eval no
  brew tap homebrew/cask-fonts && brew install font-iosevka

#+end_src
