-*- mode: org; -*-

# This file contains general hacks which I have found useful.

* On encryption
_(copied verbatim from http://www.madboa.com/geek/openssl/#encrypt
 mostly as a mirror if the site ever goes down)_

Note: the site has very interesting information on openssl, encryption, keys etc
you should definitely check it out

Encryption/Decryption

How do I base64-encode something?

Use the enc -base64 option.

# send encoded contents of file.txt to stdout
$ openssl enc -base64 -in file.txt

# same, but write contents to file.txt.enc
$ openssl enc -base64 -in file.txt -out file.txt.enc

It’s also possible to do a quick command-line encoding of a string value:

$ echo "encode me" | openssl enc -base64
ZW5jb2RlIG1lCg==

Note that echo will silently attach a newline character to your string. Consider using its -n option if you want to avoid that situation, which could be important if you’re trying to encode a password or authentication string.

$ echo -n "encode me" | openssl enc -base64
ZW5jb2RlIG1l

Use the -d (decode) option to reverse the process.

$ echo "ZW5jb2RlIG1lCg==" | openssl enc -base64 -d
encode me

How do I simply encrypt a file?

Simple file encryption is probably better done using a tool like GPG. Still, you may have occasion to want to encrypt a file without having to build or use a key/certificate structure. All you want to have to remember is a password. It can nearly be that simple—if you can also remember the cipher you employed for encryption.

To choose a cipher, consult the enc(1) man page. More simply (and perhaps more accurately), you can ask openssl for a list in one of two ways.

# see the list under the 'Cipher commands' heading
$ openssl -h

# or get a long list, one cipher per line
$ openssl list-cipher-commands

After you choose a cipher, you’ll also have to decide if you want to base64-encode the data. Doing so will mean the encrypted data can be, say, pasted into an email message. Otherwise, the output will be a binary file.

# encrypt file.txt to file.enc using 256-bit AES in CBC mode
$ openssl enc -aes-256-cbc -salt -in file.txt -out file.enc

# the same, only the output is base64 encoded for, e.g., e-mail
$ openssl enc -aes-256-cbc -a -salt -in file.txt -out file.enc

To decrypt file.enc you or the file’s recipient will need to remember the cipher and the passphrase.

# decrypt binary file.enc
$ openssl enc -d -aes-256-cbc -in file.enc

# decrypt base64-encoded version
$ openssl enc -d -aes-256-cbc -a -in file.enc

* VirtualBox
** VirtualBox on Mac
   Install Virtualbox's Guest Additions first.
*** mounting shared folders inside the virtual Linux instance.
    Virtualbox's automount is broken. To reliably share folders between
    the host and the guest operating systems:
    - Mark the folders you want to share in the VM's settings, but don't
      choose auto-mount.
    - Start the VM.
    - Add the following line to /etc/fstab
      Documents /media/Documents vboxsf uid=1000,gid=1000,nodev,noexec,nosuid,auto,rw 0 0
    - reboot for Magic
*** Getting rid of piix4_smbus 0000.00.07.0: SMBus base address uninitialized
    - Check if the module is being loaded
      # lsmod | grep i2c_piix4
    - blacklist it in /etc/modprobe.d/blacklist.conf by adding the following line to it:
      # blacklist i2c_piix4
    - Update initramfs
      # update-initramfs -u -k all

** General notes
*** Mounting the Vbox root in the host machine (for fsck or other FUBAR scenarios)
    If you want to mount your Vbox root partition without using Virtual Box,
    you might find the following commands useful :
    # This assumes you have an Ubuntu Linux host or have copied the .vdi image to a Linux host
    # This also assumes that the Guest instance is _not_ running when you do this

    # on the host machine

    $ sudo apt-get install qemu-kvm # Assumes you use Ubuntu as host
    $ sudo modprobe nbd
    $ sudo su

    # As root

    $ qemu-nbd -c /dev/nbd0 /media/Misc/ubuntu10.10-OS.vdi
    # use your own path for .vdi
    # (I suggest you take a backup of the .vdi before all this)

    $ mount /dev/nbd0p1 /mnt

    # You can find the partitions of interest using fdisk -l /dev/nbd0

    Now you should be able to the see all your files in /mnt.

    For fsck :

    $ umount /mnt
    $ fsck /dev/nbd0p1
